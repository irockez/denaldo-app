import React, { useState } from 'react';
import { parseRawData, ParsedField } from './utils/parser';
import { Link } from 'react-router-dom';


export const InputPage: React.FC = () => {
    const [id, setId] = useState('');
    const [rawData, setRawData] = useState('');
    const [parsed, setParsed] = useState<ParsedField[]>([]);
    const [additionalForms, setAdditionalForms] = useState<Record<string, string>>({});


    const handleSubmit = () => {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è —Å '–ü–æ–∫–∞–∑–∞—Ç—å'
        const showFields = getShowFields();

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const fullPayload = {
            id, // –î–æ–±–∞–≤–ª—è–µ–º id –≤ parsedData
            parsedData: {
                ...parsed.reduce((acc, item) => {
                    acc[item.key] = item.value;
                    return acc;
                }, {} as Record<string, any>),
                id, // –ù–µ –∑–∞–±—ã–≤–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å id –≤ parsedData
                ...showFields.reduce((acc, field) => {
                    const raw = additionalForms[field.key];

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –ø—É—Å—Ç–∞
                    if (!raw || raw.trim() === '') {
                        acc[field.key] = ''; // –ï—Å–ª–∏ –ø—É—Å—Ç–æ, –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                    } else {
                        const parsedAdditional = parseRawData(raw);

                        // –ï—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤, –º—ã –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ –æ–±—ä–µ–∫—Ç
                        if (Array.isArray(parsedAdditional)) {
                            const parsedObject = parsedAdditional.reduce((obj, item) => {
                                if (item.key && item.value !== undefined) {
                                    obj[item.key] = item.value;
                                }
                                return obj;
                            }, {} as Record<string, any>);
                            acc[field.key] = parsedObject;
                        } else {
                            acc[field.key] = parsedAdditional;
                        }
                    }

                    return acc;
                }, {} as Record<string, any>),
            },
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        console.log("üì¶ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", fullPayload);

        fetch('http://localhost:3000/api/submit', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(fullPayload),
        })
            .then((res) => res.json())
            .then((data) => {
                console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—è–ª –¥–∞–Ω–Ω—ã–µ:', data);
                alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
            })
            .catch((err) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', err);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!');
            });
    };

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—è —Å "–ü–æ–∫–∞–∑–∞—Ç—å"
    const getShowFields = () =>
        parsed.filter((field) => field.value.toLowerCase() === '–ø–æ–∫–∞–∑–∞—Ç—å');

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–ø. —Ñ–æ—Ä–º–∞—Ö
    const handleAdditionalChange = (key: string, value: string) => {
        setAdditionalForms((prev) => ({ ...prev, [key]: value }));
    };

    return (
        <div style={{padding: '2rem'}}>
            <h1>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–∫—Ç–µ—Å—Ç–∞</h1>

            <div style={{marginBottom: '1rem'}}>
                <label>ID –¥–∞–Ω–Ω—ã—Ö:</label>
                <br/>
                <input
                    type="text"
                    value={id}
                    onChange={(e) => setId(e.target.value)}
                    style={{width: '300px'}}
                />
            </div>

            <div style={{marginBottom: '1rem'}}>
                <label>–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤—Å—Ç–∞–≤—å—Ç–µ –±–ª–æ–∫):</label>
                <br/>
                <textarea
                    value={rawData}
                    onChange={(e) => {
                        const text = e.target.value;
                        setRawData(text);
                        const fields = parseRawData(text);
                        setParsed(fields);
                    }}
                    rows={20}
                    cols={80}
                />
            </div>

            {parsed.length > 0 && (
                <>
                    <h2>–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h2>
                    <ul>
                        {parsed.map((field, index) => (
                            <li key={index}>
                                <strong>{field.key}</strong>: {field.value}
                            </li>
                        ))}
                    </ul>
                </>
            )}

            {getShowFields().map((field, index) => (
                <div key={index} style={{marginTop: '1rem'}}>
                    <label>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞: {field.key}</label>
                    <br/>
                    <textarea
                        rows={10}
                        cols={60}
                        placeholder={`–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è "${field.key}"`}
                        value={additionalForms[field.key] || ''}
                        onChange={(e) => handleAdditionalChange(field.key, e.target.value)}
                    />
                </div>
            ))}

            {/* –ù–æ–≤—ã–µ —Ñ–æ—Ä–º—ã */}
            <div style={{marginTop: '1rem'}}>
                <label>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</label>
                <br/>
                <textarea
                    rows={6}
                    cols={60}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏..."
                    value={additionalForms['–ù–∞—Å—Ç—Ä–æ–π–∫–∏'] || ''}
                    onChange={(e) => handleAdditionalChange('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', e.target.value)}
                />
            </div>
            <div style={{marginTop: '1rem'}}>
                <label>–ú–∞–Ω–∏ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç:</label>
                <br/>
                <textarea
                    rows={6}
                    cols={60}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –º–∞–Ω–∏ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞..."
                    value={additionalForms['–ú–∞–Ω–∏ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç'] || ''}
                    onChange={(e) => handleAdditionalChange('–ú–∞–Ω–∏ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', e.target.value)}
                />
            </div>
            <div style={{marginTop: '1rem'}}>
                <label>–†–∏—Å–∫ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç:</label>
                <br/>
                <textarea
                    rows={6}
                    cols={60}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Ä–∏—Å–∫ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞..."
                    value={additionalForms['–†–∏—Å–∫ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç'] || ''}
                    onChange={(e) => handleAdditionalChange('–†–∏—Å–∫ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', e.target.value)}
                />
            </div>

            <div style={{marginTop: '2rem'}}>
                <button onClick={handleSubmit}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            </div>

            <div>
                {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö */}
                <Link to="/display">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ</Link>
            </div>

        </div>
    );
};
